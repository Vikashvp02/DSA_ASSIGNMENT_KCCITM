                                                                  Queue Using Array
                                                                  
                                                                  
#include<iostream>
using namespace std;

class Queues{
    int *arr;
    int  front;
    int  back;
    int  size;
    
    public:
    //intialization of queue
          Queues(){
             size=10;
             arr=new int(size);
             front=0;
             back=0;
          }

    void push(int data){
        if(back==size){
            cout<<"size is full"<<endl;
            return;
        }else{
            arr[back]=data;
            back++;
        }
    }

    int pop(){
        if(front==back){
            return -1;
        }
        else{
            arr[front]=-1;
            front++;
            if(front==back){
                front=0;
                back=0;
            }
        }
    }

    int Qfront(){
        if(front==back){
            return -1;
        }
        else{
            cout<<"top element is:";
            return arr[front];
        }
    }

    bool empty(){
        if(front==back){
            return true;
        }else
       return false;
    }
};

int main(){
  Queues q;
    q.push(3);
    q.push(6);
    q.push(8);
    q.push(9);
     q.pop();
    q.push(1);
   cout<< q.Qfront()<<endl;
    q.pop();
     cout<< q.Qfront()<<endl;
   cout<<q.empty()<<endl;
   q.pop();
//    q.pop();
//     cout<<q.empty()<<endl;

    return 0;
}






                                                                            Stack Using Array
                                                                            
                                                                            
                                                                            
#include <iostream>
using namespace std;

//complete the functions
class Stack{
	int *arr;
    int size;
	int end;
	
	public:
	//constructor is called whenever an object of the class is declared
	Stack(){
        size=10;
        arr=new int(size);
		cout<<"constructor is Called\n";
		end=0;
	}
	
	//push the value at the back
	void push(int val){
		cout<<"pushing the val: "<<val<<" at the back of queue\n";
        if(end==size){
            cout<<"data is overflow"<<endl;
            return;
        }else{
        arr[end]=val;
        end++;
        size--;
        }
	}
	
	int top(){
		cout<<"returning the value at top or last"<<endl;
        
		return arr[end-1];
	}
	
	void pop(){
		cout<<"removing the last element";
        arr[end]--;
	}
	
	int lenght(){
		cout<<"return the size of the queue:\n";
		return end--;
	}
	
	bool isEmpty(){
		cout<<"returning if the stack is empty\n";
        if(end!=size)
		return true;
	}
};

int main() {
	Stack s; //constructor is called on this line
	s.push(4);
	cout<<"top: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.lenght()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	
	s.push(5);
	s.push(3);
	cout<<"front: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.lenght()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	
	cout<<"top: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.lenght()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	return 0;
}




                                                                         Stack Using Singly LinkedList
                                                                         
                                                                         
                                                                         
#include <iostream>
using namespace std;

struct Node{
	int data;
	Node *next;
};
 
Node* createNewNode(int val){
	Node *temp = new Node;
	temp->data = val;
	return temp;
}

//complete the functions
class Stack{
	Node *head;
	Node *tail;
	int s;
	
	public:
	//constructor is called whenever an object of the class is declared
	Stack(){
		cout<<"constructor is Called\n";
		tail=NULL;
		s=0; 
	}
	
	//push the value at the back
	void push(int val){
		cout<<"pushing the val: "<<val<<" at the back of queue\n";
       struct Node *temp=new *Node;
       temp->data=val;
        if(head==NULL){
            head=temp;
            s++;
            return;
        }else{
            temp->next=head;
            head=temp;
            s++;
           
        }

	}
	
	int top(){
		cout<<"returning the value at top or last:\n";
		return head->data;
	}
	
	// void pop(){
	// 	cout<<"removing the last element:\n";
    //     head=head->next;
	// }
	
	// int size(){
	// 	cout<<"return the size of the queue:\n";
	// 	return s;
	// }
	
	// bool isEmpty(){
	// 	cout<<"returning if the stack is empty:\n";
	// 	return true;
	// }
};

int main() {
	Stack s; //constructor is called on this line
	s.push(4);
	cout<<"top: "<<s.top()<<"\n";
	// s.pop();
	// cout<<"size: "<<s.size()<<"\n";
	// cout<<"empty: "<<s.isEmpty()<<"\n";
	
	// s.push(5);
	// s.push(3);
	// cout<<"front: "<<s.top()<<"\n";
	// s.pop();
	// cout<<"size: "<<s.size()<<"\n";
	// cout<<"empty: "<<s.isEmpty()<<"\n";
	
	// cout<<"top: "<<s.top()<<"\n";
	// s.pop();
	// cout<<"size: "<<s.size()<<"\n";
	// cout<<"empty: "<<s.isEmpty()<<"\n";
	return 0;
}                                                                         


                                                                 
